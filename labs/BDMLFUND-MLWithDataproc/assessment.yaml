---
:name: 'Big Data & ML Fundamentals Lab 4: Recommendations ML with Dataproc v1.3'
:description: "1.Create assets (bucket)\r\n2. Create Cloud SQL instance and populate
  tables\r\n3. Launch Dataproc\r\n4. Run ML model."
:pass_percent: !ruby/object:BigDecimal 18:0.75e2
:notify: false
:score_completion_only: false
:steps:
- :title: Create assets (bucket)
  :points: 5
  :max: 60
  :interval: 23
  :multi_region: false
  :api: GCP
  :services:
  - StorageV1
  :method_name: step_one_check
  :code:  |-
    def step_one_check(handles, points)
      storage = handles[:StorageV1]
      ret_hash = { :done => false, :score => 0, :message => "" }
      buckets = storage.list_buckets&.items || []
      buckets.each do |bucket|
        if bucket.name==storage.project
          objects = storage.list_objects(bucket.name)&.items || []
          if objects.count > 0
            ret_hash = { :done => true, :score => points, :message => "Success: Create Assets" }
          end
        end
      end
      return ret_hash
    end

- :title: Create Cloud SQL instance and populate tables
  :points: 5
  :max: 90
  :interval: 23
  :multi_region: false
  :api: GCP
  :services:
  - SqladminV1beta4
  :method_name: step_two_check
  :code:  |-
    def step_two_check(handles, points)
      sql = handles[:SqladminV1beta4]
      ret_hash = { :done => false, :score => 0, :message => "" }
      desired_instance = 'rentals'
      desired_operation_type = 'IMPORT'
      desired_status = 'DONE'
      desired_uri_1 = 'sql/table_creation.sql'
      desired_uri_2 = 'sql/accommodation.csv'
      desired_uri_3 = 'sql/rating.csv'
      checker = 0

      instances =  sql.list_instances&. items || []
      instances.each do |instance|
        if instance.name.include?(desired_instance)
          instance_name = instance.name
          operations = sql.list_operations(desired_instance) &. items || []
          operations.each do |operation|
            if operation.operation_type.include?(desired_operation_type) && operation.target_id == instance_name
              if operation.import_context.uri.include?(desired_uri_1) && operation.status == desired_status
                checker += 1
              end
              if operation.import_context.uri.include?(desired_uri_2) && operation.status == desired_status
                checker += 1
              end
              if operation.import_context.uri.include?(desired_uri_3) && operation.status == desired_status
                checker += 1
              end
            end
          end
        end
        if checker != 3
          checker = 0
        elsif checker == 3
          ret_hash = { :done => true, :score => points, :message => "Success: Create Cloud SQL instance and populate tables" }
          break
        end
      end

      return ret_hash
    end

- :title: Launch Dataproc
  :points: 5
  :max: 90
  :interval: 23
  :multi_region: false
  :api: GCP
  :services:
  - ComputeV1
  - DataprocV1
  - SqladminV1beta4
  :method_name: step_three_check
  :code:  |-
    def step_three_check(handles, points)
      dataproc = handles[:DataprocV1]
      sql = handles[:SqladminV1beta4]
      compute = handles[:ComputeV1]
      ret_hash = { :done => false, :score => 0, :message => "" }
      region = 'global'
      desired_state = 'RUNNING'
      desired_instance = 'rentals'
      cluster_instances = []
      checker = 0

      clusters = dataproc.list_clusters(dataproc.project, region, freeze_args:true)&.clusters || []
      clusters.each do |cluster|
        if cluster.status.state == desired_state
          cluster.config.master_config.instance_names.each do |master_instance|
            cluster_instances.push(master_instance)
            cluster.config.worker_config.instance_names.each do |worker_instance|
              cluster_instances.push(worker_instance)
            end
          end
          instances =  sql.list_instances&. items || []
          instances.each do |instance|
            if instance.name.include?(desired_instance)
              instance.settings.ip_configuration.authorized_networks.each do |network|
                ip_value = network.value
                vm_instances = compute.list_instances &. items || []
                cluster_instances.each do |cluster_instance|
                  vm_instances.each do |vm_instance|
                    if cluster_instance.to_s == vm_instance.name
                      network_interface = vm_instance.network_interfaces
                      nat_ip = network_interface[0].access_configs[0].nat_ip
                      if ip_value.include?(nat_ip)
                        checker += 1
                      end
                    end
                  end
                end
              end
            end
          end
          if checker == 3
            ret_hash = { :done => true, :score => points, :message => "Success: Launch Dataproc" }
            break
          else
            cluster_instances = []
            checker = 0
          end
        end
      end

      return ret_hash
    end

- :title: Run ML model
  :points: 5
  :max: 90
  :interval: 23
  :multi_region: false
  :api: GCP
  :services:
  - DataprocV1
  :method_name: step_four_check
  :code:  |-
    def step_four_check(handles, points)
      dataproc = handles[:DataprocV1]
      ret_hash = { :done => false, :score => 0, :message => "" }
      region = 'global'
      desired_state = 'DONE'
      desired_file_uri = 'gs://' + dataproc.project + '/train_and_apply.py'
      desired_app = 'train_model'
      avail_app = false

      clusters = dataproc.list_clusters(dataproc.project, region, freeze_args:true)&.clusters || []
      clusters.each do |cluster|
        jobs = dataproc.list_jobs(dataproc.project, region, freeze_args:true) &. jobs || []
        jobs.each do |job|
          if job.status.state == desired_state && job.placement.cluster_name == cluster.cluster_name
            if job &.pyspark_job &. main_python_file_uri == desired_file_uri
              job.yarn_applications.each do |application|
                if application.name == desired_app
                  avail_app = true
                end
              end
            end
          end
        end
      end

      if avail_app
        ret_hash = { :done => true, :score => points, :message => "Success: Run ML model" }
      end
      return ret_hash
    end
