---
:name: 'Big Data & ML Fundamentals Lab 2 : Interact with Google Cloud Storage v1.3'
:description: "This lab has the following steps: \r\n\ 1. Create Compute Engine instance with the necessary API access. \r\n\ 2. Install software and Ingest USGS data.  \r\n\ 3. Transform the data.  \r\n\ 4. Create bucket and Store data.  \r\n\ 5. Publish Cloud Storage files to web."
:pass_percent: !ruby/object:BigDecimal 18:0.75e2
:notify: false
:score_completion_only: false
:steps:
- :title: Create Compute Engine instance with the necessary API access
  :points: 5
  :max: 60
  :interval: 30
  :multi_region: false
  :api: GCP
  :services:
  - ComputeV1
  :method_name: step_one_check
  :code:  |-
    def step_one_check(handles, points)
      compute = handles[:ComputeV1]
      ret_hash = { :done => false, :score => 0, :message => "" }
      desired_instance = 'instance'
      desired_scope = 'https://www.googleapis.com/auth/cloud-platform'
      instances = compute.list_instances&.items || []
      instances.each do |instance|
        if instance.name.include?(desired_instance)
          ret_hash[:score] += 2
          if instance.service_accounts[0].scopes.include?(desired_scope)
            ret_hash[:score] += 3
          end
        end
      end
      if ret_hash[:score] == points
        ret_hash = { :done => true, :score => points, :message => "Success: Create Compute Engine instance with the necessary API access" }
        return ret_hash
      end
      return ret_hash
    end

- :title: Install software and Ingest USGS data
  :points: 5
  :max: 60
  :interval: 30
  :multi_region: false
  :api: GCP
  :services:
  - ComputeV1
  - SSH
  :method_name: step_two_check
  :code:  |-
    def step_two_check(handles, points)
      compute = handles[:ComputeV1]
      ssh = handles[:SSH]
      ssh_cmd = 'git --version'
      ssh_cmd_2 = 'ls'
      ssh_cmd_3 = ' find . -name "*.csv"'
      desired_output = 'git version'
      desired_file = 'earthquakes'
      ret_hash = { :done => false, :score => 0, :message => "" }
      instances = compute.list_instances&.items || []
      instances.each do |instance|
        network_interface = instance.network_interfaces
        nat_ip = network_interface[0].access_configs[0].nat_ip
        result = ssh.ssh_exec nat_ip, ssh_cmd
        if result.include?(desired_output)
          ret_hash[:score] += 2
          result = ssh.ssh_exec nat_ip, ssh_cmd_2
          if !result.empty?
            ret_hash[:score] += 1
          end
          result = ssh.ssh_exec nat_ip, ssh_cmd_3
          if result.include?(desired_file)
            ret_hash[:score] += 2
          end
        end
      end
      if ret_hash[:score] == points
        ret_hash = { :done => true, :score => points, :message => "Success: Install software and Ingest USGS data" }
        return ret_hash
      end
      return ret_hash
    end

- :title: Transform the data
  :points: 5
  :max: 60
  :interval: 30
  :multi_region: false
  :api: GCP
  :services:
  - ComputeV1
  - SSH
  :method_name: step_three_check
  :code:  |-
    def step_three_check(handles, points)
      compute = handles[:ComputeV1]
      ssh = handles[:SSH]
      ret_hash = { :done => false, :score => 0, :message => "" }
      ssh_cmd = 'find . -name "*earthquakes.png"'
      desired_image = 'earthquakes.png'
      instances = compute.list_instances&.items || []
      instances.each do |instance|
        network_interface = instance.network_interfaces
        nat_ip = network_interface[0].access_configs[0].nat_ip
        result = ssh.ssh_exec nat_ip, ssh_cmd
        if result.include?(desired_image)
          ret_hash = { :done => true, :score => points, :message => "Success: Transform the data" }
        end
      end
      return ret_hash
    end

- :title: Create bucket and Store data
  :points: 5
  :max: 60
  :interval: 30
  :multi_region: false
  :api: GCP
  :services:
  - StorageV1
  :method_name: step_four_check
  :code:  |-
    def step_four_check(handles, points)
      storage = handles[:StorageV1]
      desired_object = 'earthquakes'
      ret_hash = { :done => false, :score => 0, :message => "" }
      project = storage.project
      result = storage.get_bucket(project)
      name = result.name
      objects = storage.list_objects(name)&.items || []
      objects.each do |object|
        if object.name.include?(desired_object)
          ret_hash = { :done => true, :score => points, :message => "Success: Create bucket and Store data" }
        end
      end

      return ret_hash
    end

- :title: Publish Cloud Storage files to web
  :points: 5
  :max: 60
  :interval: 30
  :multi_region: false
  :api: GCP
  :services:
  - ComputeV1
  - StorageV1
  :method_name: step_five_check
  :code:  |-
    def step_five_check(handles, points)
      storage = handles[:StorageV1]
      compute = handles[:ComputeV1]
      ssh = handles[:SSH]
      checker = 0
      entity_value = "allUsers"
      ret_hash = { :done => false, :score => 0, :message => "" }
      instances = compute.list_instances&.items || []
      nat_ip = instances.first.network_interfaces[0].access_configs[0].nat_ip
      buckets = storage.list_buckets&.items || []
      buckets.each do |bucket|
      if bucket.name==storage.project
          objects = storage.list_objects(bucket.name)&.items || []
          all_objects = objects.count
          objects.each do |object|
            acl = storage.list_object_access_controls(bucket.name, object.name)&.items || []
            acl.each do |i|
              result = i.entity.to_json
              if result.include?(entity_value)
                checker +=1
                next
              end
            end
            if all_objects == checker
              ret_hash = { :done => true, :score => points, :message => "Publish Cloud Storage files to web" }
            end
          end
        end
      end
      return ret_hash
    end
