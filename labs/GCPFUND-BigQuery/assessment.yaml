---
:name: 'GCP Fundamentals: Getting Started with BigQuery'
:description: 1. Load data from Cloud Storage into BigQuery.
:pass_percent: !ruby/object:BigDecimal 18:0.75e2
:notify: false
:score_completion_only: false
:steps:
- :title: Load data from Cloud Storage into BigQuery
  :points: 10
  :max: 30
  :interval: 10
  :multi_region: false
  :api: GCP
  :services:
  - BigqueryV2
  :method_name: step_one_check
  :code:  |-
    def step_one_check(handles, points)
      bq = handles[:BigqueryV2]
      ret_hash = { :done => false, :score => 0, :message => "" }
      desired_dataset = 'logdata'
      desired_table = 'accesslog'
      desired_table_kind = 'bigquery#table'
      desired_job_state = 'DONE'
      desired_source_uri = 'gs://cloud-training/gcpfci/access_log.csv'

      datasets = bq.list_datasets &. datasets || []
      datasets.each do |dataset|
        if dataset.dataset_reference.dataset_id.strip == desired_dataset
          desired_dataset_id = dataset.dataset_reference.dataset_id
          tables = bq.list_tables(desired_dataset_id) &. tables || []
          tables.each do |table|
            if table.table_reference.table_id.strip == desired_table && table.kind == desired_table_kind
              desired_table_id = table.table_reference.table_id
              jobs = bq.list_jobs(all_users:true) &. jobs || []
              jobs.each do |job|
                desired_job_id = job.job_reference.job_id
                job = bq.get_job(desired_job_id)
                if job.configuration.load && !job.status.errors
                  if job.configuration.load.destination_table.table_id == desired_table && job.status.state == desired_job_state
                    if job.configuration.load.source_uris.include?(desired_source_uri)
                      ret_hash = { :done => true, :score => points, :message => "Success: Load data from Cloud Storage into BigQuery" }
                    end
                  end
                end
              end
            end
          end
        end
      end
      return ret_hash
    end
